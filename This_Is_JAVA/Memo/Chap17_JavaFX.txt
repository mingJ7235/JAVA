1-1 JavaFX 개요
○ JAVA UI 변천사
	AWT -> Swing -> JavaFX

○ JavaFX 
	- 레이아웃, 스타일, 애플리케이션 로직을 분리해서 개발이 가능하다.
	- Swing에 비해서 훨씬 가볍고 풍부한 UI를 제공한다.
	- 1.7 버전부터 JavaFX2.2를 JDK와 JRE에 포함시킨다.

1-2 JavaFX 애플리케이션 개발 시작

○ 메인 클래스 생성부터 !!
- 메인 클래스가 Application 이라는 클래스를 상속해야한다. 
- Application -> JavaFX 패키지에 있음
- 메인은 반드시 Application을 상속!!

- start() 메소드를 재정의 해야한다 .
	-> start()메소드는 UI를 생성하고, 윈도우창을 만들어준다.
	-> main 클래스에서 main 메소드를 만들고, 그 main메소드에서
	launch()를 호출함으로 start()를 실행하도록 해야한다 .
	-> main 스레드 이외에 ui 생성용 스레드를 실행해줘야하기 때문이다.
	-> 그 스레드를 launch가 실행시켜준다. 
	->main 메소드에서 start()를 호출하는것이아니다! 

※Stage : 윈도우창을 말함. 무대!! 윈도우창도 무대라고 생각하면된다.
	JavaFX는 윈도우를 stage로 이야기한다. ! 

○ JavaFX라이프 사이클

- launch() 메소드가 실행되면
	-> JavaFX Application Thread 스레드와 -> UI 생성, 변경 스레드 / 기본생성자, start(), stop() 실행
	-> JavaFX Launcher 스레드가 생성된다. -> init() 실행
※JavaFX Application Thread 에서만 UI를 생성하고 변경해야한다!!
	즉, init()에서 UI를 생성하거나 변경하면 안된다!!!
	=> 매우 중요함


○ 메인 클래스 실행 매개값 얻기
	init() 메소드에서 매개값을 얻을 수 있다.
		Parameters params = getParameters();
		1) List<String>list = params.getRaw();
		2) Map<String,String>map = params.getNamed();
		두가지 방법으로 매개값을 얻을 수 있다. 
		=> 두번째 방법이 더 유리하다. key 로검색해서, 값을 얻을 수 있다. 



○ 무대와 장면
- 무대 (Stage)는 하나의 장면을(Scene) 가질 수 있다.
- 장면은 javafx.scene.Scene으로 표현한다. 
Scene객첼르 만들어서 Stage에 추가를 해야한다.

Scene scene = new Scene(Parent root);
		-> 생성자의 매개값 : 장면안에 들어가는 실재 내용 부분!
		Parent는 컨테이너 클래스로 만들게 되는데,
		내용의 제일 위에있다고해서 루트 컨테이너라고한다.
primaryStage.setScene(scene); -> Stage위에 생성된 Scene을 설정하는 것.
primaryStage.show();

※ 하나의 윈도우(Stage)에는 하나의 Scene만을 넣을 수있다.
	-> 두개의 Scene을 동시에 할수 없음
	-> setScene(scene)을 통해 Scene을 stage에 넣는것임



1-3 FXML 레이아웃
○ 레이아웃
- Scene에는 다양한 컨트롤이 포함 되는데 이들을 배치하는것이 레이아웃이다.
1) 프로그램적 레이아웃
	- 자바 코드로만 개발하기 때문에 다른 언어를 익힐 필요가 없다.
	- 자바코드로 컨트롤을 배치한다.
	- 코드를 잘 정리하지 않으면 난해한 프로그램이 될 확률이 높아진다.
	- 디자이너와 협력해서 개발하는 것이 어렵다. ->JAVA언어를 써야하므로.
	- 간단한 레이아웃 변경이나 스타일 변경이라도 자바소스를 수정하고
	재컴파일 해야한다. 
	- 간단한걸 만드려면 이것으로도 해도 되지만, 실무에서는 ㄴㄴ

2) FXML 레이아웃
	- FXML은 XML 기반의 마크업 언어이다.
	- html 태그 작성하듯이 레이아웃을 작성하는 것임
	- JavaFX UI 레이아웃을 자바코드에서 분리해서 태그로 선언하는 방법을 제공한다.
	 레이아웃과 자바코드를 아예 분리해서 개발을 하는 것임 -> 디자이너와 협업이 가능
	 배치부분은 XML로, 이벤트 코드는 자바코드로 !
	- 웹 애플리케이션 및 안드로이드 앱을 개발하는 방법과 유사하다.
	- 간단한 레이아웃 변경이나 스타일 변경시 자바 소스를 수정할 필요가 없다.
	=> 유지보수가 편리하다. 
	- 레이아웃이 비슷한 Scene들간에 재사용이 가능하다. 


○ 마진과 패딩

패딩 padding : 들여쓰는 양. 즉 안쪽 여백. Hbox를 기준으로, 얼마만큼 여백을 주고
마진 margin : 버튼을 기준으로. 바깥쪽 여백. 바깥 여백 ! 









