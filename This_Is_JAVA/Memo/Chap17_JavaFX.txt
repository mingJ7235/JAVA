1-1 JavaFX 개요
○ JAVA UI 변천사
	AWT -> Swing -> JavaFX

○ JavaFX 
	- 레이아웃, 스타일, 애플리케이션 로직을 분리해서 개발이 가능하다.
	- Swing에 비해서 훨씬 가볍고 풍부한 UI를 제공한다.
	- 1.7 버전부터 JavaFX2.2를 JDK와 JRE에 포함시킨다.

1-2 JavaFX 애플리케이션 개발 시작

○ 메인 클래스 생성부터 !!
- 메인 클래스가 Application 이라는 클래스를 상속해야한다. 
- Application -> JavaFX 패키지에 있음
- 메인은 반드시 Application을 상속!!

- start() 메소드를 재정의 해야한다 .
	-> start()메소드는 UI를 생성하고, 윈도우창을 만들어준다.
	-> main 클래스에서 main 메소드를 만들고, 그 main메소드에서
	launch()를 호출함으로 start()를 실행하도록 해야한다 .
	-> main 스레드 이외에 ui 생성용 스레드를 실행해줘야하기 때문이다.
	-> 그 스레드를 launch가 실행시켜준다. 
	->main 메소드에서 start()를 호출하는것이아니다! 

※Stage : 윈도우창을 말함. 무대!! 윈도우창도 무대라고 생각하면된다.
	JavaFX는 윈도우를 stage로 이야기한다. ! 

○ JavaFX라이프 사이클

- launch() 메소드가 실행되면
	-> JavaFX Application Thread 스레드와 -> UI 생성, 변경 스레드 / 기본생성자, start(), stop() 실행
	-> JavaFX Launcher 스레드가 생성된다. -> init() 실행
※JavaFX Application Thread 에서만 UI를 생성하고 변경해야한다!!
	즉, init()에서 UI를 생성하거나 변경하면 안된다!!!
	=> 매우 중요함


○ 메인 클래스 실행 매개값 얻기
	init() 메소드에서 매개값을 얻을 수 있다.
		Parameters params = getParameters();
		1) List<String>list = params.getRaw();
		2) Map<String,String>map = params.getNamed();
		두가지 방법으로 매개값을 얻을 수 있다. 
		=> 두번째 방법이 더 유리하다. key 로검색해서, 값을 얻을 수 있다. 



○ 무대와 장면
- 무대 (Stage)는 하나의 장면을(Scene) 가질 수 있다.
- 장면은 javafx.scene.Scene으로 표현한다. 
Scene객첼르 만들어서 Stage에 추가를 해야한다.

Scene scene = new Scene(Parent root);
		-> 생성자의 매개값 : 장면안에 들어가는 실재 내용 부분!
		Parent는 컨테이너 클래스로 만들게 되는데,
		내용의 제일 위에있다고해서 루트 컨테이너라고한다.
primaryStage.setScene(scene); -> Stage위에 생성된 Scene을 설정하는 것.
primaryStage.show();

※ 하나의 윈도우(Stage)에는 하나의 Scene만을 넣을 수있다.
	-> 두개의 Scene을 동시에 할수 없음
	-> setScene(scene)을 통해 Scene을 stage에 넣는것임



1-3 FXML 레이아웃
○ 레이아웃
- Scene에는 다양한 컨트롤이 포함 되는데 이들을 배치하는것이 레이아웃이다.
1) 프로그램적 레이아웃
	- 자바 코드로만 개발하기 때문에 다른 언어를 익힐 필요가 없다.
	- 자바코드로 컨트롤을 배치한다.
	- 코드를 잘 정리하지 않으면 난해한 프로그램이 될 확률이 높아진다.
	- 디자이너와 협력해서 개발하는 것이 어렵다. ->JAVA언어를 써야하므로.
	- 간단한 레이아웃 변경이나 스타일 변경이라도 자바소스를 수정하고
	재컴파일 해야한다. 
	- 간단한걸 만드려면 이것으로도 해도 되지만, 실무에서는 ㄴㄴ

2) FXML 레이아웃
	- FXML은 XML 기반의 마크업 언어이다.
	- html 태그 작성하듯이 레이아웃을 작성하는 것임
	- JavaFX UI 레이아웃을 자바코드에서 분리해서 태그로 선언하는 방법을 제공한다.
	 레이아웃과 자바코드를 아예 분리해서 개발을 하는 것임 -> 디자이너와 협업이 가능
	 배치부분은 XML로, 이벤트 코드는 자바코드로 !
	- 웹 애플리케이션 및 안드로이드 앱을 개발하는 방법과 유사하다.
	- 간단한 레이아웃 변경이나 스타일 변경시 자바 소스를 수정할 필요가 없다.
	=> 유지보수가 편리하다. 
	- 레이아웃이 비슷한 Scene들간에 재사용이 가능하다. 


○ 마진과 패딩

패딩 padding : 들여쓰는 양. 즉 안쪽 여백. Hbox를 기준으로, 얼마만큼 여백을 주고
마진 margin : 버튼을 기준으로. 바깥쪽 여백. 바깥 여백 ! 

○ 테그선언
-FXML 테그는 <와 > 사이에 테그이름을 작성한 것. 시작테그와 끝 테그가 있어야한다. !
<테그이름> ... </테그이름>
-시작 테그와 끝 테그 사이에는 테그 내용이 작성되는데,
테그 내용이 필요없을 경우에는 <테그이름/> 같이 붙어야한다.
		=> 시작인 동시에 끝인경우. 
- 테그 이름은 JavaFX의 클래스명이거나, Setter메소드 명이 될 수 있다.

Button button = new Button ();
button.setText("확인");

=>

<Button> => Button 클래스!
	<text>확인</text> => setter 메소드! (setText에서 set을 떼고 T를 소문자로! text 테그!)
</Button>


○속성 선언
- 속성값은 반드시 "" 또는 ''로 감싸야한다. 

<테그이름 속성명 = "값" 속성명 ='값'> ... </테그이름>

-속성명은 Setter메소드명 !!!!!!! 
	- 모든 setter가 사용될 수 있는 것은 아니고, 
	기본 타입의 값을 세팅하거나, String을 세팅하는 Setter만 올 수 있다.
	ex) Button의 글자를 설정할 때 setText() 메소드를 사용할 때,
	매개값이 문자열이므로 속성을 지정할 수 있다.
	=> <Buttom text="확인"/>
	- 기본타입이나 String 을 세팅하는 게 아닐경우, 이렇게 속성선언을 못함!
	- 테그선언해야함

○객체 선언
<클래스 속성 ="값">
- 일반적으로 <클래스> 형태로 테그를 작성하면 기본생성자를 호출하여 객체가 생성된다.
	-> 기본생성자를 꼭 만들어야한다.
	-> 매개값이 있는 생성자를 호출하려면! 속성으로
	<클래스 속성 = "값"> 해야한다!!
	->Setter말고도 매개값 호출하는 생성자라면 이렇게 가능. 
		(but, 값이 기본값이거나 String이어야 속성으로 호출가능)



<클래스 fx:value= "값">
- new 연산자로 객체를 생성하지 않고, 클래스가 valueOf(String)메소드를 제공하는 경우가있다.
	예를들어 String, Intger, Double, Boolean 클래스는 valueOf()를 호출하여 객체 생성!
	이 경우 <클래스 fx:value="값"> 으로 FXML테그를 작성할 수 있다. 
	ex><String fx:value ="Hello, World!"/>

<클래스 fx:constant = "상수">
- 클래스에 정의된 상수값을 얻고 싶을 경우에 사용. 

<클래스 fx:factory= "정적메소드">
- 정적 메소드로 객체를 얻어야 하는 경우. 
ex>ComboBox combo = new ComboBox();
	combo.setItems(
		FXCollections. observableArrayList( //정적메소드임
			"공개", "비공개"
		)
	);

<ComboBox>
	<items>
		<FXCollections fx:factory = "observableArrayList">
			<String fx:value = "공개"/>
			<String fx:value ="비공개"/>
		</FXCollections>
	</items>
</ComboBox>
 

○FXML 로딩과 Scene생성
- FXML 로딩
	- FXML파일을 읽어들여 선언된 내용을 객체화 하는것을 말한다!
	- FXMLLoader의 load()메소드를 이용한다. 
	1) 정적메소드 load() 사용하는방법
	2) 인스턴트메소드 load() 사용하는 방법


○JavaFX Scene Builder 프로그램


1-4 JavaFX컨테이너
○ 컨테이너
- 레이아웃을 작성할 때 다양한 컨트롤들을 쉽게 배치할 수 있도록 해주는 역할을 한다.
- 컨테이너의 종류와 배치방법을 잘 이해하는것이 중요하다.
- 컨테이너도 클래스다. javafx.scene.layout 패키지 안에 다양한 컨테이너 클래스들이 존재한다.
- XXXPane은 모두 컨테이너라고 보면되고,Hbox,VBox가 있다

○AnchorPane컨테이너
- AnchorPane의 좌상단 (0,0)을 기준으로 컨트롤을 좌표로 배치한다.
- 컨트롤 좌표는 좌상단 (layoutX, layoutY) 값을 말하는데, (0,0)에서 떨어진 거리이다. 

- 주요 설정
	- prefWidth : 폭
	- prefHeight : 높이
	- layoutX : 컨트롤의 X좌표
	- layoutY : 컨트롤의 Y좌표
	- childeren : 컨트롤을 포함 시킴. 

※ 좌표로 배치 하기때문에 scene builder의 도움을 받는것이 용이함. (코드로 계산하기 빡셈)


○HBox와 VBox컨테이너
- 수평과 수직으로 컨트롤을 배치하는 컨테이너
	=> 자식 컨트롤의 크기를 재조정한다. 
- HBox는 컨트롤의 높이를 끝까지 확장하고, 컨트롤의 폭을 유지 
- VBox는 컨트롤의 폭을 끝까지 확장하고 컨트롤의 높이는 유지





	




