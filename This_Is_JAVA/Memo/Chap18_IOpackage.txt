1-1 IO패키지 소개
○java.io패키지
	->자바의 기본적인 데이터 입출력 API제공

1-2 입력 스트림과 출력스트림
○입력스트림과 출력스트림 개념
프로그램을 기준으로 데이터가 들어오게되면 입력스트림을 이용
데이터가 나가게되면 출력스트림을 이용한다.

스트림 : 데이터의 흐름

입력스트림 
- 데이터의 출발지 : 키보드, 파일, 프로그램등
	-> 여기서 데이터들이 흘러서들어옴
출력스트림
- 데이터의 도착지 : 모니터, 파일, 프로그램등
	-> 여기로 데이터들이 흘러나감

데이터가 들어오는것 : 입력스트림
데이터가 나가는것 : 출력스트림
프로그램의 기준에 따라 같은 스트림이어도 상대적으로 입력스트림과 출력스트림의 입장이 다름

프로그램 A 도착지 < -- 입력스트림 --  <-- 출력스트림 -- 출발지 프로그램 B

○ 바이트기반 스트림과 문자 기반 스트림
- 바이트 기반 스트림
	-그림, 멀티미디어, 문자등 모든 종류의 데이터를 받고 보낼 수 있다.

- 최상위 클래스 
	-입력 : InputStream
		하위클래스 : XXXInputStream
		ex) FileInputStream
	-출력 : OutputStream
		하위클래스 : XXXOutputStream
		ex) FileOutputStream

- 문자 기반 스트림
	- 문자만 받고 보낼 수 있도록 특화되어 있다.

-최상위 클래스
	-입력 : Reader
		하위클래스 : XXXReader
		ex) FileReader
	-출력 : Writer
		하위클래스 : XXXWriter
		ex) FileWriter


○InputStream

- 바이트 기반 입력 스트림의 최상위 클래스로 추상클래스이다. 
	-> 즉, 객체화를 할 수 없다는 것임
	-> 하위클래스로 객체화해야함 

- 대표적 하위 클래스 : FileInputStream, BufferedInputStream, DataInputStream... 

- 주요 메소드
1) read () : 입력 스트림으로부터 1바이트를 읽고 읽은 바이트를 리턴한다.
	리턴타입 : int 
	=> int는 4바이트인데, read()가 읽은 1바이트가 4바이트중 가장 끝에 저장된다. 


2) read(byte[] b) : 입력 스트림으로부터 읽은 바이트들을 매개값으로 주어진 바이트 배열 b에
		저장하고 실제로 읽은 바이트 수를 리턴한다. 
		즉, 데이터 저장은 배열에하고, 리턴은 바이트 수를 하는것
		read()와 다르다!!
		리턴타입 : int
3) read (byte[] b, int off, int len) :  입력 스트림으로부터 len 개의 바이트 만큼 읽고
		매개값으로 주어진 바이트 배열 b[off] 부터 len 개까지 저장한다.
		즉, off는 배열의 인덱스 번호다!
		그리고 실제로 읽은 바이트 수인 len 개를 리턴한다.
		만약 len개를 모두 읽지 못하면 실제로 읽은 바이트 수를 리턴한다.
		리턴 타입 : int


4) close () :  사용한 시스템 자원을 반납하고 입력 스트림을 닫는다.
	inputstream을 사용하면 닫아줘야함 !


○read()메소드
※read() 더이상 읽을게 없으면 -1을 리턴한다.


○read(byte[] b) 메소드
-> 배열에 바이트의 데이터를 저장,
-> 실재 읽은 바이트의 수를 리턴
※ 배열에 공간이 남아있다면 직전에 읽었던 데이터가 그자리에 그대로 남아있다.
※ 더이상 읽을게 없으면 -1을 리턴한다.

○ read (byte[] b, int off, int len) 메소드
-> 배열에 바이트의 데이터를 저장
-> 실재 읽은 바이트의 수를 리턴
-> 배열의 인덱스번호 (off) 부터 len 만큼의 정보를 저장함


○ close() 메소드
	-InputStream을 더이상 사용하지 않을 경우 호출해준다.
	-InputStream에서 사용했던 시스템 자원을 풀어준다.
	※반드시 close를 해줘야한다!



○OutputStream
- 바이트 기반 출력 스트림의 최상위 클래스로 추상클래스다.
	-> 즉, InputStream과 마찬가지로 객체 생성 X
	-> 대신에 하위클래스를 가지고 객체를 생성한다.

-대표적 하위 클래스 : FileOutputStream, PrintStream, BufferedOutputStream, DataOutputStream

- 주요 메소드

1) write (int b) : 출력 스트림으로 1바이트를 보낸다.
	마찬가지로, int가 4바이트이지만, 끝 1바이트만 출력한다.

2) write (byte[] b) : 출력 스트림에 매개값으로 주어진 바이트 배열 b의 바이트를 보낸다.

3) write (byte[] b, int off, int len) : 뭔느낌인지 알지?

4) flush () : write를 하게 되면 데이터가 바로 출력되는것이 아니라
메모리 버퍼에 쌓였다가 버퍼가 꽉차면 데이터를 출력함,
데이터가 꽉차지 않았을 경우 강제적으로 데이터를 출력하도록 해주는 메소드임
즉, 버퍼에 잔류하는 모든 바이트를 출력한다.
그러므로 write를 하고 flush를 해야 데이터가 출력이된다!

5) close() : 더이상 outputStream을 사용하지 않으면 출력스트림을 닫아준다!

○ write (int b) 메소드


○ write (byte [] b) 메소드
-> write (int b) 와 다르게 배열을 통째로 한번에 출력한다.

○ write (byte [] b , int off, int len) 메소드


○flush () 와 close()
어떠한 출력 스트림을 사용하고나서도  write를 했다면 flush를 해야한다.
반드시 !!! 그래야 데이터가 출력이 된다. 
더이상 출력스트림을 사용하지 않으면 close를 해야한다. 


○Reader
- 문자 기반 입력 스트림의 최상위 클래스로 추상 클래스다.
- 문자만 읽을 수 있고 byte는 읽을 수 없다. 

- 대표적 클래스 : FileReader, BufferedReader, InputStreamReader

- 주요 메소드
1) read() : 입력 스트림으로 부터 한개의 문자를 읽고 리턴한다.
		-> 한 문자는 2바이트이므로 리턴하는 int 4바이트 중에 끝 2바이트에 저장
2) read (char[] cbuf) : 읽은 문자들을 char배열에 저장하고, 읽은 문자 수는 리턴한다.

3) read (char[] cbuf, int off , int len ) : 읽은 문자들을 char에 저장, 배열의 시작인덱스 off부터
		len만큼 저장한다. 그리고 실제 읽은 문자수를 리턴
4) close () : 닫기!



○read() 메소드
	-> 한번에 한 문자를 읽는다! (2바이트) 
※ 더이상 읽을 문자가 없으면 -1을 리턴함! 

○ read(char[] cbuf) 메소드

○ read(char[] cbuf, int off, int len) 메소드


○ Writer
	-문자기반 출력 스트림의 최상위 클래스로 추상 클래스

- 메소드
1) write (int c) : 매개값으로 주어진 한 문자를 보낸다.

2) write (char [] cbuf) : 배열의 모든 문자를 출력

3) write (char [] cbuf, int off, int len)

4) write (String str) 매개값으로 주어진 문자열을 전부

5) write (String str, int off, int len)

6) flush ()

7) close ()


1-3 콘솔 입출력
○콘솔 Console 
	- 시스템을 사용하기 위해 키보드로 입력을 받고 화면으로 출력하는 소프트웨어
System.out : 출력 스트림
System.in : 입력스트림

○System.in 필드
	-InputStream 타입의 입력 스트림 이므로 InputStream 변수에 대입할 수있다.
		- InputStream is = System.in;
	-읽은 byte는 키보드의 아스키코드 이다. 
	- 아스키 코드로부터 문자로읽기위해서 char로 변환 시킨다.


○ 키보드로 부터 입력된 한글 읽기
-> 한글은 2바이트로 되어있다. 
-> 바이트 배열에 담아야한다. 

○ Scanner 쓰면댐;

1-4 파일 입출력

○File 클래스
- 파일 시스템의 파일을 표현하는 클래스
	- 파일 크기, 파일 속성, 파일 이름등의 정보를 제공한다.
	- 파일 생성 및 삭제 기능 제공
	- 디렉토리를 생성하고 디렉토리에 존재하는 파일리스트를 얻어내는 기능 제공
	(File이라고해서 파일만 관여하지 않음. 디렉토리도 관리함)

- 파일 객체 생성
	File file = new File ("파일이나 디렉토리의 경로가 매개값!");

- 파일 또는 디렉토리 존재 유무 확인 메소드
	boolean isExist = file.exists();
	=>파일 또는 디렉토리가 존재하는 지 확인. true나 false리턴

-파일 및 디렉토리 생성 및 삭제 메소드
	-createNewFile()
	-mkdir() -> 새로운 디렉토리를 생성 (경로상에 없는 디렉토리를 넣으면 에러발생)
	-mkdirs() -> 경로상에 없는 모든 디렉토리를 생성 (그래서 s 즉 복수가 붙음)
		=> 경로상에 디렉토리가 확실하지 않을때는 mkdirs()를 사용하는것이 좋음
	-delete() 파일 또는 디렉토리 삭제


- 파일 및 디렉토리의 정보를 리턴하는 메소드
	-canExecute() 실행할 수있는 파일인지 여부
	-canRead() 읽을수 있는지
	-canWrite() 데이터를 수정, 저장할수있는지
	-getName() 파일의 이름을 리턴
	-getParent() 부모 디렉토리를 리턴
	-getParentFile() 부모디렉토리를 File 객체로 생성하고 그 File을 리턴
	-getPath() 전체 경로를 리턴
	-isDirectory() 디렉토리인지 여부
	-isFile() 파일인지 여부
	-isHidden () 숨김 파일인지 여부
	-lastModified()  마지막 수정날짜 및 시간을 리턴
	-lentgh() 파일의 크기 리턴 (사이즈가 아니라 렝스임!)
		=> long타입으로 리턴됨 중요!
	- list() 디렉토리에 포함된 파일 및 서브디렉토리 목록 전부를 
		String 배열로 리턴
	- list(FilenameFilter filter) 디렉토리에 포함된 파일 및 서브디렉토리 목록중에
		FilenameFilter에 맞는 것만 String 배열로 리턴
		-> 필터링을 하는 것임
	- listFiles() 디렉토리에 포함된 파일 및 서브 디렉토리 목록 전부를
		File배열로 리턴
	- listFiles(FilenameFilter filter) 디렉토리에 포함된 파일 및 서브디렉토리 목록중에
		FilenameFilter에 맞는 것만 File배열로 리턴


○ FileInputStream
- 파일로부터 바이트 단위로 읽어 들일 때 사용
	- 그림, 오디오, 비디오, 텍스트 파일등 모든 종류의 파일을 읽을 수 있다.
- 객체 생성방법
	1) FileInputStream fis = new FileInputStream ("경로");

	2) File file = new File (경로);
	   FileInputStream fil = new FileInputStream (file);

- FileInputSteram 객체가 생성될 때 파일과 직접 연결
	예외처리해야한다!

- InputStream 하위 클래스 이므로 사용 방법이 InputStream과 동일하다. 

○FileOutputStream
- 파일에 바이트 단위로 데이터를 저장할 때 사용

- 파일이 이미 존재할 경우, 데이터를 출력하게 되면 파일을 덮어쓰게 됨.
- 기존 파일 내용 끝에 데이터를 추가할 경우, 두번째 매개변수에 true를 넣으면댐
FileOutputStream fis = new FileOutputStream (file, true);

1-5 보조 스트림

○ 보조 스트림
- 다른 스트림과 연결이 되어 여러가지 편리한 기능을 제공해주는 스트림
	입력스트림과 출력스트림에 연결하여 프로그램에 자료를 받거나 출력함
	ex> 문자 변환, 입출력 성능 향성, 기본 데이터 타입 입출력, 객체 입출력 등 기능 제공

- 보조 스트림 생성
	보조스트림 변수 = new 보조스트림 (연결 스트림)

- 보조 스트림 체인
	-> 보조스트림에 보조스트리을 또 붙일 수 있음
	-> 데이터를 문자로변환(보조1) 하고 성능향상(보조2)  -> 프로그램전달
	=> 요렇게 체인으로!

○ 문자 변환 보조 스트림
- 소스 스트림이 바이트 기반 스트림이지만 데이터가 문자일 경우사용할 수 있다.
	- Reader와 Writer는 문자 단위로 입출력하기 때문에 바이트 기반 스트림보다 편리
	- 문자셋의 종류를 지정할 수 있기 때문에 다양한 문자를 입출력

- InputStreamReader
	-> 문자 변환 보조 스트림 InputStream을 가지고 Reader를 만든다.
	바이트를 문자로 읽게끔 해준다.

InputStream is = System.in;
Reader reader = new InputStreamReader(is);

FileInputStream fis = new FileInputStream ("C:/Temp/file.txt");
Reader reader = new InputStreamReader(fis);

※문자 변환 보조스트림이 없이는 바이트로 받으면 또 문자로 변환하는 과정이 필요하다. 

-OutputStreamWriter
	-> 문자를 바이트로 변경하여 보낼경우

프로그램 문자데이터-> OutputStreamWriter -> outputstream -> 바이트

FileOutPutStream fos = new FileOutputStream ("C:/Temp/file.txt");
Writer writer = new OutputStreamWriter(fos);



○성능 향상 보조 스트림
- 입출력 성능에 영향을 미치는 입출력 소스
	- 하드디스크 -> 이걸로 입출력하면 가장 느림
		프로그램이 아무리 빨라도 하드디스크 속도에 맞춤
	- 느린 네트워크 -> 아무리 빨리 데이터를 보내고싶어도
		네트워크가 느리면 느리게감

- 버퍼를 이용한 해결
	- 프로그램이 입출력 소스와 직접 작업하지 않고 버퍼와 작업함으로써 실행 성능을 향상
	프로그램 -> 메모리 버퍼 -> 하드디스크
	※한번에 버퍼 내용 모두를 전송
	즉, 버퍼에 데이터를 고속으로 전송시키고 그 메모리 버퍼에
	데이터를 쌓고, 꽉차게 되면 한번에 데이터를 하드에 전송함 (flush!)

	- 프로그램은 쓰기속도가 향상
	- 버퍼가 차게 되면 데이터를 한번에 하드에 보냄으로써 출력 횟수를 줄여준다. 빨라짐


- 입력 버퍼 제공 : BufferedInputStream, BufferedReader
	프로그램으로 데이터를 읽을 때 고속으로 !

- 출력 버퍼 제공 : BufferedOutputStream, BufferedWriter
	프로그램에서 데이터를 출력할때 고속으로


○ 객체 입출력 보조 스트림
- 객체를 파일 또는 네트워크로 입출력할 수 있는 기능 제공

-ObjectInputStream, ObjectOutputStream을 사용해서
객체를 쉽게 전송이 가능하다. 
	-> 프로그램의 객체를 바이트단위로 변경하여 출력스트림으로 가져오고, 내보낸다.
	이런 과정을 '직렬화' 라고한다.
	객체를 바이트화 시키는것을 직렬화
	바이트를 객체로 만드는것을 역직렬화 라고한다. 



○직렬화가 가능한 클래스 (Serializable)
	->직렬화가 되어있지 않은 클래스는 객체입출력이 불가능하다.
	-> Java는 Serializable 인터페이스를 구현한 클래스만 직렬화 할 수 있도록 제한한다.

	-transient 키워드가 붙은 필드는 직렬화에서 제외됨


-serialVersionUID필드
	-> 식별값임
	-> 직렬화된 객체를 역직렬화할때는 직렬화 했을 때와 같은 클래스를 사용해야함
	-> 클래스의 이름이 같더라도 클래스의 내용이 변경된 경우 역직렬화는 실패한다. 
		=> 클래스가 변경된 경우..!
	-> serialVersionUID는 같은 클래스임을 알려주는 식별자 역할
		=> Serializable인터페이스가 구현되면 컴파일시 자동적으로
		 serialVersionUID 정적 필드가 추가됨
		=> 재컾아링하면 UID 의 값이 달라진다.
	-> 불가피한 수정이 있을 경우 명시적으로 UID를 선언한다.
		-> static final long serialVersionUID = 정수값; << 상수로줘야함


 cmd에서 얻은 UID : private static final long serialVersionUID = -1265691405514514962L;
UID값을 전송하려는 객체에 선언해주면, 그 선언된 객체는 수정이되어도
직렬화, 역직렬화가 오류없이 가능해진다. 


1-6 네트워크 기초
	
○네트워크
- 여러대의 컴퓨터를 통신 회선으로 연결한 것
	- 홈 네트워크 : 컴퓨터들을 유.무선 등의 통신 회선으로 연결
	- 지역 네트워크 : 회사, 건물, 특정 영역에 존재하는 컴퓨터를 통신 회선으로 연결
	- 인터넷 : 지역 네트워크를 통신 회선으로 연결한 것
○ 서버와 클라이언트
	- 서버 : 서비스를 제공하는 프로그램
		ex> 웹서버, FTP서버, DBMS, 메신저 서버등
		=> 클라이언트의 연결을 수락하고, 요청 내용을 처리한 후 응답을 보낸다.
	-클라이언트 : 서비스를 받는 프로그램
		ex> 웹브라우저, FTP 클라이언트, 메신저
		=> 네트워크 데이터를 필요로 하는 모든 어플리케이션 
	

○IP 주소와 포트 (port)
- IP 주소
	- 네트워크 상에서 컴퓨터를 식별하는 번호
	- 네트워크 어댑터 마다 할당 (LAN 카드 마다 할당됨)
	- xxx.xxx.xxx.xxx (xxx는 0~255 사이의 정수. 4가지로 분류됨)

- 포트(port)
	- 같은 컴퓨터 내에서 프로그램을 식별하는 번호
	(웹서버, FTP서버, DBMS 서버 등 프로그램을 식별함)
	- 클라이언트는 서버에 연결 요청시 IP주소와 Port를 같이 제공한다. 
	-> port 번호로 식별하여 해당 프로그램을 연결한다.
	ex) 클라이언트가 웹브라우저 프로그램이라면, ip주소를 네트워크 어댑터에 제공하고
	port넘버로 프로그램이 연결된다.
	- port번호는 0~65535 범위의 값을 가진다. 
	이범위는 3가지로 구분이된다.
		0~1023 : well know port numbers : 특정 애플리케이션용으로 미리 예약된 포트
		1024~49151 : Registered Port Numbers : 회사에서 등록해서 사용할수있는 포트
		49152 ~65535 : OS가 부여하는 동적 포트 또는 개인적인 목적으로 설정하는 포트

○InetAddress 클래스로 IP 주소 얻기
- java.net 패키에 포함되어있다.
	- IP주소를 표현한 클래스
	- 로컬 컴퓨터의 IP주소 뿐아니라
	- 도메인 이름을 DNS에서 검색한 후 IP주소를 가져오는 기능을 제공
※도메인 이름 : www.naver.com 이런것들.
	하나의 도메인은 여러가지의 ip주소가 등록되어있다. 

- 로컬 컴퓨터에서 얻기
InetAddress ia = InetAddress.getLocalHost();

- 도메인 이름으로 얻기
InetAddress ia = InetAddress.getByName (Sgring host); 
	매개값이 도메인 이름을 넣고, ip주소를 가져온다. 

InetAddress [] iaArr = InetAddress.getAllByName (Sgring host);
	매개값을 도메인으로 넣고, 여러개의 ip주소를 각각 가져와서 배열로 리턴한다.

이 InetAdrress객체를 얻고 이것으로 IP주소를 얻는것임
String ip = InetAddress.getHostAddress();


1-7 TCP 네트워킹
○TCP (Transmission Control Protocol)
- 연결지향적 프로토콜 (통신을 하기위해서 일단 연결해야함) -> 시간 소요가 됨
- 통신 선로 고정 (두 프로그램이 TCP로 통신하려면 회선이 고정, 즉 정해짐) 
		회선 자체가 느릴경우-> 전송 속도 느려질 수도 있음
- 데이터를 정확하고 안정적으로 전달 (이것이 장점임!)
	-> 반드시 연결이 성공되야 데이터를 전달하므로 데이터가 정확하고 
	데이터를 순차적으로 보내고 순차적으로 받아서 처리하므로 안정적으로 전달된다.
	데이터 누수가 없다.
- java.net API
	- ServerSocket, Socket 두가지 API가 제공됨

- ServerSocket과 Socket용도	
	둘다 서버에서 사용되는 API
	0 ServerSocket : 특정 포트를 가지고 실행됨 (프로그램 실행 고유번호)
		이 포트를 서버소켓의 바인딩 포트라고 부른다. 
		서버가 시작될때 물고 들어가는 포트라는 의미임
		서버 소켓은 특정 보트에서 실행된 이후에 클라이언트의 연결을위해서
		대기를 해야하는데 이걸 accept()메소드가한다.
		연결을 수락하는 역할을 accept()가 한다.
		accept() 하고 클라이언트와 소통하는 Socket 객체를 만든다.
	0 Socket : 클라이언트가 서버에 연결요청하기위해 클라이언트에서 생성되는 객체
		소켓이 서버 소켓을 통해 accept()메소드가 연결요청을 받고
		accept()가 연결 수락이 되면 소캣 객체를 만들어서 클라이언트에 전달한다.

○ ServerSocket 생성과 연결 수락
- ServerSocket 생성과 포트 바인딩
1) ServerSocket serverSocket = new ServerSocket (바인딩할 포트번호);
2) ServerSocket serverSocket = new ServerSocket ();
   serverSocket.bind (new InetSocketAddress("ip주소", 바인딩할 포트번호);

- 연결수락 (서버쪽 소켓) (예외처리해야함)
Socket socket = serverSocket.accept();
=> 이 socket을 가지고 클라이언트와 데이터를 주고받을 수 있다.
	연결된 클라이언트 IP 주소 얻기
	getRemoteSocektAddress() 메소드 활용, InetSocketAddress타입으로 리턴

- ServerSocket포트 언바인딩
	-> serverSocket.close();	

○Socket생성과 연결요청 (클라이언트쪽)
- 생성 (예외처리해야함)
1) Socket socket = new Socket ("localhost", 서버의 포트번호);
2) Socket socket = new Socket (new InetSocketAddress("localhost", 서버의 포트번호));
※예외 2가지 : 1.ip표기 방법이 잘못된경우 2. 해당 포트 서버에 연결할 수 없는경우

3) socket = new Socket();
	socket.connect(new InetSocketAddress("localhost", 서버의 포트번호));

- 연결끊기 (예외처리해야함)
- socket.close()


○Socket 데이터 통신
- 입출력 스트림 얻기 (얻는 것이므로 get)
socket.getInputStream(); / socket.getoutputStream();

-데이터 보내기

-데이터 받기
read()블로킹 해제
	1) 상대방이 데이터를 보냄 -return : 읽은 바이트 수
	2) 상대방이 정상적으로 socket의 close()를 호출 - -1리턴
	3) 비정상적으로 종료 - IOException 발생
		(상대방 컴퓨터가 꺼졌거나 예기치않게 프로그램이 종료)

---------서버 예제------------

package sec07.exam02_data_read_write;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;

public class ServerEx {
	public static void main(String[] args) {
		//서버
		ServerSocket serverSocket = null;
		
		try {
			serverSocket = new ServerSocket();
			serverSocket.bind(new InetSocketAddress("localhost", 5001));
			while (true) {
				//서버는 항상 클라이언트 요청을 기다려야하므로 무한루프
				System.out.println("[연결 기다림]");
				Socket socket =serverSocket.accept(); //클라이언트의 서버 연결요청을 수락하는 accept() 메소드.
											//연결요청이 들어오기 전에는 블로킹되어있음
											//Socket 타입을 리턴
				
				InetSocketAddress  isa = (InetSocketAddress) socket.getRemoteSocketAddress();
				System.out.println("[연결 수락함]" + isa.getHostName()); //클라이언트 ip주소를 얻을 수 있음
				
				//데이터를 받기
				byte [] bytes = null;
				String message = null;
				
				InputStream is = socket.getInputStream();
				bytes = new byte[100];
				int readByteCount = is.read(bytes); //데이터를 읽는것. 리턴은 데이터의 읽은 바이트 수.
																			//데이터는 bytes에 저장
				
				message = new String(bytes, 0, readByteCount, "UTF-8");
				
				System.out.println("[데이터 받기 성공]\n받은 메세지 : " + message);
				
				OutputStream os = socket.getOutputStream();
				message = "Hello Client";
				bytes = message.getBytes("UTF-8");
				os.write(bytes);
				os.flush();
				System.out.println("[데이터 전송 성공]");
				
				is.close();
				os.close();
				socket.close(); //연결을 끊겠다는것임
				
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		if(!serverSocket.isClosed()) {
			try {
				serverSocket.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		
	}
}


-------클라이언트 예제----------
package sec07.exam02_data_read_write;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.Socket;

public class ClientEx {
	public static void main(String[] args) {
		//클라이언트
		
		Socket socket = null;
		
		try {
			socket = new Socket();
			System.out.println("[연결 요청]");
			socket.connect(new InetSocketAddress("localhost", 5001));
			System.out.println("[연결 성공]");
			
			byte [] bytes = null;
			String message = null;
			
			OutputStream os = socket.getOutputStream(); //아웃풋 스트림 얻기 ! 보내야하니까
			message = "Hello Server! ";
			bytes = message.getBytes("UTF-8");
			os.write(bytes);
			os.flush();
			System.out.println("[데이터 전송 성공]");
			
			InputStream is = socket.getInputStream();
			bytes = new byte [100];
			int readByteCount = is.read(bytes); 
			message = new String (bytes, 0, readByteCount, "UTF-8");
			System.out.println("[데이터 받기 성공]\n받은 데이터 : " + message);
			
			is.close();
			os.close();
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		if (!socket.isClosed()) {
			try {
				socket.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}
-------------------------------

○ 스레드 병렬처리
- 블로킹 (대기상태) 가되는 메소드
	-ServerSocekt의 accept()
	-Socket 생성자 또는 connect() //클라이언트 에서 사용하는것
	-Socket의 read(), write() //통신 시 

- 병렬 처리의 필요성
ㅁ 스레드가 블로킹 되면 다른 작업을 수행하지 못한다
	ex> 입출력할 동안 다른 클라이언트의 연결 요청을 수락하지 못한다.
	      입출력 할 동안 다른 클라이언트의 입출력을 하지 못한다. 

ㅁ UI 생성 /변경 스레드에서 블로킹 메소드를 호출하지 않도록 한다.
	ex> UI 생성 및 변경이 안되고 이벤트 처리가 안된다. 

※그러므로 병렬처리를 해야한다!! 병렬적으로 다른 클라이언트도 접속해서 액션할수있도록해야한다.


- 스레드 병렬 처리

accept()를 실행하는 스레드 1개 -> accept를 제어하는 스레드

통신을 하는 스레드를 별도로 만들어야한다. 
통신할때마다 각각의 스레드가 서로 클라이언트와 서버가 통신하게끔 만들어줘야한다.
즉, accpet()가 될때마다 스레드가 생성되어서 통신하도록 해야한다.

그런데 만약 클라이언트가 수천개면 스레드도 수천개가 만들어져야하나?
-> 스레드가 많아질수록 서버의 성능이 급격히 저하가 된다.
-> 클라이언트가 갑자기 급증하면 서버의 작업스레드가 기하급수적으로 증폭되면 서버 폭주!
-> 이것에 대한 해결 방법 : 서버의 스레드를 제한된 갯수만큼 운영하는것 !!
	=> 제한된 스레드를 가지고 작업처리를 해야한다.
	=> 즉 스레드풀을 사용한다!!!!!오오오오!!!배웠음!!
	(ExecutorService를 사용!)

-> 스레드 풀을 통해서 작업큐에 작업을 순차적으로 스레드들이 꺼내서 작업하도록함
각 스레드는 큐에서 작업을 가져와서 실행시킨다.
클라이언트가 많아지고 작업이 많아져도 작업큐의 누적되는 작업의양이 증가되고
스레드의 량은 고정적으로 제한될 것이다. 


○ 채팅 서버 및 클라이언트 구현 !!!


1-8 UDP 네트워킹
○UDP : User Datagram Protocol

- 비연결 지향적 프로토콜
	- 연결 절차를 거치지 않고 발신자가 일방적으로 데이터를 발신하는 방식
	- 연결 절차가 없기 때문에 TCP보다 빠르게 전송할 수 있다.
- 통신 선로가 고정적이지 않다.
	- 데이터 패킷들이 서로 다른 통신 선로를 통해 전달될 수 있다.
	- 먼저 보낸 패킷이 느린 선로를 통해 전송될 경우, 나중에 보낸 패킷보다 늦게 도착할 수 있다.
- 데이터 손실이 발생할 수 있다.
	- 일부 패킷은 잘못된 선로로 전송되어 잃어 버릴 수 있다. 
		-> 데이터 전달 신뢰성이 떨어진다.

○ java.net API에 있음
	-DatagramSocket, DatagramPacket 2가지의 클래스를 제공함

	Packet은 전송되는 데이터 객체라고 이해하면됨. Packet으로 싸서 
	socket을 통해 보냄 (send)
	받을때도 packet에 받아서 저장한다. 그리고 그 받은 packet을 
	socket을 통해 얻어냄 (receive)




























