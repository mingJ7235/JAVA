인터페이스>

인터페이스쪽은 부모라고 생각하면되고,
자식은 구현한 클래스라고 생각하면 된다. 

인터페이스 활용 >

인터페이스 배열로 구현 객체 관리
매개변수의 다형성

인터페이스는 부모클래스가 되어주는 것이다.
구현클래스는 자손클래스가 되어주는 것이다. 

인터페이스를 객체화하면 => (원래객체화한됨)
	익명 객체라고 한다. 

인터페이스에서 디폴트 메소드를 허용한 이유는 기존 인터페이스를 확장해서 
새로운 기능을 추가하기 위해서다. 

부모 인터페이스의 default 메소드를 추상메소드를 만들면
다시 이것이 강제성을 띄게 된다. 


내부클래스>>>
	has ~ a : (부품으로 가지고있는것. 자동차-바퀴) - import

	is ~ a : (상속. 강아지는 동물이다) - extends


클래스 A 
클래스 B ( 또 다른 클래스가 안쓰고 A만이 쓸 경우 )
	: 사용하는 클래스는 A밖에 없다. 이럴경우 A에 넣어버린다. 
	B는 A의 멤버가 된다. 

=> 클래스 A안에 클래스 B를 멤버로 넣기. => 캡슐화함

장점 : 관리하기가 편하다. 보안에 장점이 있다. 

클래스 안에 인터페이스가 들어가기도 함.

내부클래스의 4가지가 있다
1) 인스턴스 클래스

	class  A{
		class B {
		}
	}

2) 스택틱 클래스

	class A {
		static class B {
		}	
	}

3) 지역 클래스

	class A {
		void method () {
			classB {
			}
		}
	}

4) 익명 클래스 (anonymous class)
	클래스 이름이 없는 클래스 






