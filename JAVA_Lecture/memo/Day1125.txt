시험은 인터페이스까지 나옴>>
응용문제 -> 시험문제 비슷 (이것보다 난이도가 낮음)

내부클래스 >

내부클래스의 장점
-> 내부 클래스에서 외부 클래스의 멤버들을 쉽게 접근 가능
-> 코드의 복잡성을 줄일 수 있다. 

1. 인스턴스 내부클래스
외부클래스가 main에서 객체화되면
외부클래스 멤버만 heap에 올라간다.
그렇기에 접근이 불가능하다.
so, 내부클래스 멤버를 사용하기 위해서는
1. main에서 외부클래스를 객체화시킨다.
2. 내부클래스를 객체화한다.
=> 외부클래스명.내부클래스명 객체명 = 외부클래스객체.new 내부클래스생성자
외부클래스 객체를 사용하는것 주의!

2. static 내부클래스

3. local 내부클래스

4. 익명클래스
=> 일회용이기 때문에 명칭을 주지 않는것임.

객체화
Person p1 = new Person ();
다형성
Person p2 = new Student ();
익명클래스
Person p2 = new Student () {
	//중괄호가 있음. 이것이 익명클래스 구조임
};

클래스 만들기 - 설계도
class A {
}
객체화 하기 - 인스턴스화 
사용하기 물리적으로 heap메모리에 올리기

1) 
인터페이스 -> 구현클래스 -> 메인클래스 객체화
추상메소드	   오버라이딩    사용
=> 원래 이렇게 사용했음 

익명클래스에서는, 중간 단계를 넘어서 사용함
인터페이스 -> 메인클래스 객체화 (구현클래스를 익명개체로!)
           오버라이딩 (바로!)

구조 >
인터페이스명 변수 = new 인터페이스명 () {
//이부분이 클래스임	
};


2) 
부모클래스 -> 자식클래스 -> 메인클래스 자식 객체화
Parent 	   Child      Child 객체화

부모클래스 -> 메인클래스 자식객체화
Parent     Parent의 자식 (익명으로)
=> 이름을 사용하지 않고 익명 자식 객체로 사용

구조>
부모클래스명 변수 = new 부모클래스명 () {
//이부분이 자식 익명 클래스
};